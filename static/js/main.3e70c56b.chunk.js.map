{"version":3,"sources":["components/UserCard.js","components/UserSearch.js","App.js","serviceWorker.js","index.js"],"names":["UserCard","console","log","gridStyle","width","textAlign","tip","spinning","this","props","loading","hoverable","cover","alt","src","avatar","name","Grid","style","onClick","handleClick","bind","followers","repos","React","Component","UserSearch","Search","placeholder","onSearch","value","searchUser","App","state","setState","fetch","method","redirect","then","response","text","result","JSON","parse","message","error","login","avatar_url","public_repos","catch","xs","span","offset","sm","md","lg","xl","align","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uPAkCeA,E,4KA5BPC,QAAQC,IAAI,kB,+BAIZ,IAAMC,EAAY,CACdC,MAAO,MACPC,UAAW,UAGf,OACI,kBAAC,IAAD,CAAMC,IAAI,aAAaC,SAAUC,KAAKC,MAAMC,SACxC,kBAAC,IAAD,CACIC,WAAS,EACTC,MAAO,yBAAKC,IAAI,UAAUC,IAAKN,KAAKC,MAAMM,UAE1C,4BAAKP,KAAKC,MAAMO,MAChB,kBAAC,IAAKC,KAAN,CAAWC,MAAOf,EACPgB,QAASX,KAAKY,YAAYC,KAAKb,OAD1C,cAGgBA,KAAKC,MAAMa,WAE3B,kBAAC,IAAKL,KAAN,CAAWC,MAAOf,GAAlB,UAAqCK,KAAKC,MAAMc,a,GAxB7CC,IAAMC,W,QCWdC,E,uKAVD,IAAD,OACL,OACI,kBAACC,EAAA,EAAD,CACIC,YAAY,kBACZC,SAAU,SAAAC,GAAK,OAAI,EAAKrB,MAAMsB,WAAWD,U,GALhCN,IAAMC,W,SCkFhBO,E,kDAzEX,WAAYvB,GAAQ,IAAD,8BACf,cAAMA,IACDwB,MAAQ,CACTlB,OAAQ,6DACRC,KAAM,QACNM,UAAW,GACXC,MAAO,GACPb,SAAS,GAPE,E,uDAWRoB,GAAQ,IAAD,OAMdtB,KAAK0B,SAAS,CAACxB,SAAS,IAExByB,MAAM,gCAAkCL,EAPnB,CACjBM,OAAQ,MACRC,SAAU,WAMTC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIC,KAAKC,MAAMF,MAC1BH,MAAK,SAAAG,GACF,EAAKP,SAAS,CAACxB,SAAS,IACD,cAAnB+B,EAAOG,QACPA,IAAQC,MAAM,kCAEd,EAAKX,SAAS,CACVlB,KAAMyB,EAAOK,MACb/B,OAAQ0B,EAAOM,WACfzB,UAAWmB,EAAOnB,UAClBC,MAAOkB,EAAOO,kBAGzBC,OAAM,SAAAJ,GAAK,OAAI5C,QAAQC,IAAI,QAAS2C,Q,+BAIzC,OACI,6BACI,6BACA,6BACA,6BACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIK,GAAI,CAACC,KAAM,GAAIC,OAAQ,GACvBC,GAAI,CAACF,KAAM,GAAIC,OAAQ,GACvBE,GAAI,CAACH,KAAM,GAAIC,OAAQ,GACvBG,GAAI,CAACJ,KAAM,EAAGC,OAAQ,GACtBI,GAAI,CAACL,KAAM,EAAGC,OAAQ,IACtBK,MAAM,UAEN,kBAAC,EAAD,CAAY3B,MAAOtB,KAAKyB,MAAMH,MAAOC,WAAYvB,KAAKuB,WAAWV,KAAKb,UAG9E,6BACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CACI0C,GAAI,CAACC,KAAM,GAAIC,OAAQ,GACvBC,GAAI,CAACF,KAAM,GAAIC,OAAQ,GACvBE,GAAI,CAACH,KAAM,GAAIC,OAAQ,GACvBG,GAAI,CAACJ,KAAM,EAAGC,OAAQ,GACtBI,GAAI,CAACL,KAAM,EAAGC,OAAQ,IACtBK,MAAM,UAEN,kBAAC,EAAajD,KAAKyB,c,GAtEzBT,IAAMC,WCKJiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdvB,OAAM,SAAAJ,GACL5C,QAAQ4C,MAAMA,EAAMD,a","file":"static/js/main.3e70c56b.chunk.js","sourcesContent":["import React from \"react\";\nimport {Card, Spin} from \"antd\";\n\nclass UserCard extends React.Component {\n\n    handleClick() {\n        console.log(\"============\")\n    }\n\n    render() {\n        const gridStyle = {\n            width: '50%',\n            textAlign: 'center',\n        };\n\n        return (\n            <Spin tip=\"Loading...\" spinning={this.props.loading}>\n                <Card\n                    hoverable\n                    cover={<img alt=\"example\" src={this.props.avatar}/>}\n                >\n                    <h1>{this.props.name}</h1>\n                    <Card.Grid style={gridStyle}\n                               onClick={this.handleClick.bind(this)}\n                    >\n                        followers: {this.props.followers}\n                    </Card.Grid>\n                    <Card.Grid style={gridStyle}>repos: {this.props.repos}</Card.Grid>\n                </Card>\n            </Spin>\n        )\n    }\n}\n\nexport default UserCard","import React from \"react\";\nimport Search from \"antd/es/input/Search\";\n\nclass UserSearch extends React.Component {\n    render() {\n        return (\n            <Search\n                placeholder=\"input user name\"\n                onSearch={value => this.props.searchUser(value)}\n            />\n        )\n    }\n}\n\nexport default UserSearch","import React from 'react';\nimport './App.css';\nimport {Row, Col} from \"antd\";\nimport UserCard from \"./components/UserCard\";\nimport UserSearch from \"./components/UserSearch\";\nimport {message} from 'antd';\n\nclass App extends React.Component {\n    avatar_url;\n    login;\n    public_repos;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            avatar: \"https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png\",\n            name: \"React\",\n            followers: \"\",\n            repos: \"\",\n            loading: false\n        }\n    }\n\n    searchUser(value) {\n        let requestOptions = {\n            method: 'GET',\n            redirect: 'follow'\n        };\n\n        this.setState({loading: true})\n\n        fetch(\"https://api.github.com/users/\" + value, requestOptions)\n            .then(response => response.text())\n            .then(result => JSON.parse(result))\n            .then(result => {\n                this.setState({loading: false})\n                if (result.message === \"Not Found\")\n                    message.error('用户不存在');\n                else\n                    this.setState({\n                        name: result.login,\n                        avatar: result.avatar_url,\n                        followers: result.followers,\n                        repos: result.public_repos\n                    })\n            })\n            .catch(error => console.log('error', error));\n    }\n\n    render() {\n        return (\n            <div>\n                <br/>\n                <br/>\n                <br/>\n                <Row>\n                    <Col\n                        xs={{span: 20, offset: 2}}\n                        sm={{span: 16, offset: 4}}\n                        md={{span: 12, offset: 6}}\n                        lg={{span: 8, offset: 8}}\n                        xl={{span: 4, offset: 10}}\n                        align=\"middle\"\n                    >\n                        <UserSearch value={this.state.value} searchUser={this.searchUser.bind(this)}/>\n                    </Col>\n                </Row>\n                <br/>\n                <Row>\n                    <Col\n                        xs={{span: 20, offset: 2}}\n                        sm={{span: 16, offset: 4}}\n                        md={{span: 12, offset: 6}}\n                        lg={{span: 8, offset: 8}}\n                        xl={{span: 4, offset: 10}}\n                        align=\"middle\"\n                    >\n                        <UserCard {...this.state} />\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}